Question 1
When you initialize a repository you need to type git init. This creates the
git file for the different commits or versions to be stored.

Question 2
A staging area is different than a working directory because you have the
ability to see the files you want to add to the main branch.

How can you use the staging area to make sure you have one commit per logical
change?
The staging area allows users to make a logical change and monitor. Once the
changes have been added to the staging area you are able to commit or back out
of the changes that have been made.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
Branches are helpful if you want to do things that are a potential risk or
could change the functionality of the program. Things like creating an easy
mode or changing the language of the program.

How do the diagrams help you visualize the branch structure?
Diagrams are helpful because they show how different branches interact with the
Master. There are all kinds of different branches that one can work on but you
may want to merge them back together.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

Merging two branches together ensures that all of the areas of a new feature
are merged back with the working code found in the master branch. It is easy
for us to visualize this when we diagram it out. Otherwise, we may have issues
trying to imagine how a branch will merge back into another.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
The pros about doing merges manually is that you have the ability to resolve
conflicts. This allows the developers to ensure the the most efficient and
working code. If automatic merging was in place then if would be difficult to
dictate what code is used.
